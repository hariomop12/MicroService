version: '3.8'

services:
  # PostgreSQL databases
  postgres:
    image: postgres:15-alpine
    container_name: postgres_main
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: users_db,products_db,orders_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - microservices
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user_service
    ports:
      - "8001:8001"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: users_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product_service
    ports:
      - "8002:8002"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: products_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - microservices
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order_service
    ports:
      - "8003:8003"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: orders_db
      PRODUCT_SERVICE_URL: http://product-service:8002
    depends_on:
      postgres:
        condition: service_healthy
      product-service:
        condition: service_started
    networks:
      - microservices
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: ./api-getway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8000:8000"
    environment:
      USER_SERVICE_URL: http://user-service:8001
      PRODUCT_SERVICE_URL: http://product-service:8002
      ORDER_SERVICE_URL: http://order-service:8003
    depends_on:
      - user-service
      - product-service
      - order-service
    networks:
      - microservices
    restart: unless-stopped

  # NGINX
  nginx:
    image: nginx:alpine
    container_name: nginx_reverse_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - microservices
    restart: unless-stopped

networks:
  microservices:
    driver: bridge

volumes:
  postgres_data: